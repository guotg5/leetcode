package 贪心算法;

/**
 * 贪心算法
 * 贪心算法是指在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，只做出在某种意义上的局部最优解。
 * 贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。
 *
 * 解题的一般步骤是：
 * 1.建立数学模型来描述问题；
 * 2.把求解的问题分成若干个子问题；
 * 3.对每一子问题求解，得到子问题的局部最优解；
 * 4.把子问题的局部最优解合成原来问题的一个解。
 *
 * 设1元、2元、5元、10元、20元、50元、100元的纸币分别有c0, c1, c2, c3, c4, c5, c6张。现在要用这些钱来支付K元，至少要用多少张纸币？用贪心算法的思想，很显然，每一步尽可能用面值大的纸币即可
 * 像这个例子 局部最优解 就是每次找出最大的 最终组成整体最优解
 *
 * @Author guotiangang
 * @Date 2023/4/6 17:41
 */
public class Common {

    /**
     * 给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。
     * 数组中的每个元素代表你在该位置可以跳跃的最大长度。
     * 判断你是否能够到达最后一个下标。
     * [2,3,1,1,4]
     **/
    public boolean canJump(int[] nums) {
        return true;
    }
}
